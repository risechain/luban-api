// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// EpochInfo defines model for EpochInfo.
type EpochInfo struct {
	AvailableSlots *[]SlotInfo `json:"available_slots,omitempty"`
}

// ReserveBlockSpaceRequest defines model for ReserveBlockSpaceRequest.
type ReserveBlockSpaceRequest struct {
	BlobCount     *int `json:"blob_count,omitempty"`
	EscrowDeposit *int `json:"escrow_deposit,omitempty"`
	GasLimit      *int `json:"gas_limit,omitempty"`
	TargetSlot    *int `json:"target_slot,omitempty"`
}

// ReserveBlockSpaceResponse defines model for ReserveBlockSpaceResponse.
type ReserveBlockSpaceResponse struct {
	RequestId *openapi_types.UUID `json:"request_id,omitempty"`
	Signature *string             `json:"signature,omitempty"`
}

// SlotInfo defines model for SlotInfo.
type SlotInfo struct {
	BlobsAvailable       *int `json:"blobs_available,omitempty"`
	ConstraintsAvailable *int `json:"constraints_available,omitempty"`
	GasAvailable         *int `json:"gas_available,omitempty"`
	Slot                 *int `json:"slot,omitempty"`
}

// SubmitTransactionRequest defines model for SubmitTransactionRequest.
type SubmitTransactionRequest struct {
	RequestId   *openapi_types.UUID `json:"request-id,omitempty"`
	Transaction *string             `json:"transaction,omitempty"`
}

// GetCommitmentsV1PreconfFeeParams defines parameters for GetCommitmentsV1PreconfFee.
type GetCommitmentsV1PreconfFeeParams struct {
	// Slot slot
	Slot *int `form:"slot,omitempty" json:"slot,omitempty"`
}

// PostCommitmentsV1ReserveBlockspaceParams defines parameters for PostCommitmentsV1ReserveBlockspace.
type PostCommitmentsV1ReserveBlockspaceParams struct {
	// XTaiyiSignature An ECDSA signature from the user over fields of request body
	XTaiyiSignature *string `json:"x-taiyi-signature,omitempty"`
}

// PostCommitmentsV1SubmitTransactionParams defines parameters for PostCommitmentsV1SubmitTransaction.
type PostCommitmentsV1SubmitTransactionParams struct {
	// XTaiyiSignature An ECDSA signature from the user over fields of body.
	XTaiyiSignature *string `json:"x-taiyi-signature,omitempty"`
}

// PostCommitmentsV1ReserveBlockspaceJSONRequestBody defines body for PostCommitmentsV1ReserveBlockspace for application/json ContentType.
type PostCommitmentsV1ReserveBlockspaceJSONRequestBody = ReserveBlockSpaceRequest

// PostCommitmentsV1SubmitTransactionJSONRequestBody defines body for PostCommitmentsV1SubmitTransaction for application/json ContentType.
type PostCommitmentsV1SubmitTransactionJSONRequestBody = SubmitTransactionRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetCommitmentsV1EpochInfo request
	GetCommitmentsV1EpochInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCommitmentsV1PreconfFee request
	GetCommitmentsV1PreconfFee(ctx context.Context, params *GetCommitmentsV1PreconfFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommitmentsV1ReserveBlockspaceWithBody request with any body
	PostCommitmentsV1ReserveBlockspaceWithBody(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommitmentsV1ReserveBlockspace(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, body PostCommitmentsV1ReserveBlockspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCommitmentsV1SubmitTransactionWithBody request with any body
	PostCommitmentsV1SubmitTransactionWithBody(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCommitmentsV1SubmitTransaction(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, body PostCommitmentsV1SubmitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetCommitmentsV1EpochInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommitmentsV1EpochInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCommitmentsV1PreconfFee(ctx context.Context, params *GetCommitmentsV1PreconfFeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCommitmentsV1PreconfFeeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommitmentsV1ReserveBlockspaceWithBody(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommitmentsV1ReserveBlockspaceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommitmentsV1ReserveBlockspace(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, body PostCommitmentsV1ReserveBlockspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommitmentsV1ReserveBlockspaceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommitmentsV1SubmitTransactionWithBody(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommitmentsV1SubmitTransactionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCommitmentsV1SubmitTransaction(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, body PostCommitmentsV1SubmitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCommitmentsV1SubmitTransactionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetCommitmentsV1EpochInfoRequest generates requests for GetCommitmentsV1EpochInfo
func NewGetCommitmentsV1EpochInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commitments/v1/epoch_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCommitmentsV1PreconfFeeRequest generates requests for GetCommitmentsV1PreconfFee
func NewGetCommitmentsV1PreconfFeeRequest(server string, params *GetCommitmentsV1PreconfFeeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commitments/v1/preconf_fee")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Slot != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slot", runtime.ParamLocationQuery, *params.Slot); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCommitmentsV1ReserveBlockspaceRequest calls the generic PostCommitmentsV1ReserveBlockspace builder with application/json body
func NewPostCommitmentsV1ReserveBlockspaceRequest(server string, params *PostCommitmentsV1ReserveBlockspaceParams, body PostCommitmentsV1ReserveBlockspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommitmentsV1ReserveBlockspaceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCommitmentsV1ReserveBlockspaceRequestWithBody generates requests for PostCommitmentsV1ReserveBlockspace with any type of body
func NewPostCommitmentsV1ReserveBlockspaceRequestWithBody(server string, params *PostCommitmentsV1ReserveBlockspaceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commitments/v1/reserve_blockspace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTaiyiSignature != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-taiyi-signature", runtime.ParamLocationHeader, *params.XTaiyiSignature)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-taiyi-signature", headerParam0)
		}

	}

	return req, nil
}

// NewPostCommitmentsV1SubmitTransactionRequest calls the generic PostCommitmentsV1SubmitTransaction builder with application/json body
func NewPostCommitmentsV1SubmitTransactionRequest(server string, params *PostCommitmentsV1SubmitTransactionParams, body PostCommitmentsV1SubmitTransactionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCommitmentsV1SubmitTransactionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostCommitmentsV1SubmitTransactionRequestWithBody generates requests for PostCommitmentsV1SubmitTransaction with any type of body
func NewPostCommitmentsV1SubmitTransactionRequestWithBody(server string, params *PostCommitmentsV1SubmitTransactionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/commitments/v1/submit_transaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XTaiyiSignature != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-taiyi-signature", runtime.ParamLocationHeader, *params.XTaiyiSignature)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-taiyi-signature", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetCommitmentsV1EpochInfoWithResponse request
	GetCommitmentsV1EpochInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommitmentsV1EpochInfoResponse, error)

	// GetCommitmentsV1PreconfFeeWithResponse request
	GetCommitmentsV1PreconfFeeWithResponse(ctx context.Context, params *GetCommitmentsV1PreconfFeeParams, reqEditors ...RequestEditorFn) (*GetCommitmentsV1PreconfFeeResponse, error)

	// PostCommitmentsV1ReserveBlockspaceWithBodyWithResponse request with any body
	PostCommitmentsV1ReserveBlockspaceWithBodyWithResponse(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommitmentsV1ReserveBlockspaceResponse, error)

	PostCommitmentsV1ReserveBlockspaceWithResponse(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, body PostCommitmentsV1ReserveBlockspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommitmentsV1ReserveBlockspaceResponse, error)

	// PostCommitmentsV1SubmitTransactionWithBodyWithResponse request with any body
	PostCommitmentsV1SubmitTransactionWithBodyWithResponse(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommitmentsV1SubmitTransactionResponse, error)

	PostCommitmentsV1SubmitTransactionWithResponse(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, body PostCommitmentsV1SubmitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommitmentsV1SubmitTransactionResponse, error)
}

type GetCommitmentsV1EpochInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EpochInfo
}

// Status returns HTTPResponse.Status
func (r GetCommitmentsV1EpochInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommitmentsV1EpochInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCommitmentsV1PreconfFeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int
}

// Status returns HTTPResponse.Status
func (r GetCommitmentsV1PreconfFeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCommitmentsV1PreconfFeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommitmentsV1ReserveBlockspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReserveBlockSpaceResponse
}

// Status returns HTTPResponse.Status
func (r PostCommitmentsV1ReserveBlockspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommitmentsV1ReserveBlockspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCommitmentsV1SubmitTransactionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PostCommitmentsV1SubmitTransactionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCommitmentsV1SubmitTransactionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetCommitmentsV1EpochInfoWithResponse request returning *GetCommitmentsV1EpochInfoResponse
func (c *ClientWithResponses) GetCommitmentsV1EpochInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCommitmentsV1EpochInfoResponse, error) {
	rsp, err := c.GetCommitmentsV1EpochInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommitmentsV1EpochInfoResponse(rsp)
}

// GetCommitmentsV1PreconfFeeWithResponse request returning *GetCommitmentsV1PreconfFeeResponse
func (c *ClientWithResponses) GetCommitmentsV1PreconfFeeWithResponse(ctx context.Context, params *GetCommitmentsV1PreconfFeeParams, reqEditors ...RequestEditorFn) (*GetCommitmentsV1PreconfFeeResponse, error) {
	rsp, err := c.GetCommitmentsV1PreconfFee(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCommitmentsV1PreconfFeeResponse(rsp)
}

// PostCommitmentsV1ReserveBlockspaceWithBodyWithResponse request with arbitrary body returning *PostCommitmentsV1ReserveBlockspaceResponse
func (c *ClientWithResponses) PostCommitmentsV1ReserveBlockspaceWithBodyWithResponse(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommitmentsV1ReserveBlockspaceResponse, error) {
	rsp, err := c.PostCommitmentsV1ReserveBlockspaceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommitmentsV1ReserveBlockspaceResponse(rsp)
}

func (c *ClientWithResponses) PostCommitmentsV1ReserveBlockspaceWithResponse(ctx context.Context, params *PostCommitmentsV1ReserveBlockspaceParams, body PostCommitmentsV1ReserveBlockspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommitmentsV1ReserveBlockspaceResponse, error) {
	rsp, err := c.PostCommitmentsV1ReserveBlockspace(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommitmentsV1ReserveBlockspaceResponse(rsp)
}

// PostCommitmentsV1SubmitTransactionWithBodyWithResponse request with arbitrary body returning *PostCommitmentsV1SubmitTransactionResponse
func (c *ClientWithResponses) PostCommitmentsV1SubmitTransactionWithBodyWithResponse(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCommitmentsV1SubmitTransactionResponse, error) {
	rsp, err := c.PostCommitmentsV1SubmitTransactionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommitmentsV1SubmitTransactionResponse(rsp)
}

func (c *ClientWithResponses) PostCommitmentsV1SubmitTransactionWithResponse(ctx context.Context, params *PostCommitmentsV1SubmitTransactionParams, body PostCommitmentsV1SubmitTransactionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCommitmentsV1SubmitTransactionResponse, error) {
	rsp, err := c.PostCommitmentsV1SubmitTransaction(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCommitmentsV1SubmitTransactionResponse(rsp)
}

// ParseGetCommitmentsV1EpochInfoResponse parses an HTTP response from a GetCommitmentsV1EpochInfoWithResponse call
func ParseGetCommitmentsV1EpochInfoResponse(rsp *http.Response) (*GetCommitmentsV1EpochInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommitmentsV1EpochInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EpochInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCommitmentsV1PreconfFeeResponse parses an HTTP response from a GetCommitmentsV1PreconfFeeWithResponse call
func ParseGetCommitmentsV1PreconfFeeResponse(rsp *http.Response) (*GetCommitmentsV1PreconfFeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCommitmentsV1PreconfFeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCommitmentsV1ReserveBlockspaceResponse parses an HTTP response from a PostCommitmentsV1ReserveBlockspaceWithResponse call
func ParsePostCommitmentsV1ReserveBlockspaceResponse(rsp *http.Response) (*PostCommitmentsV1ReserveBlockspaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommitmentsV1ReserveBlockspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReserveBlockSpaceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCommitmentsV1SubmitTransactionResponse parses an HTTP response from a PostCommitmentsV1SubmitTransactionWithResponse call
func ParsePostCommitmentsV1SubmitTransactionResponse(rsp *http.Response) (*PostCommitmentsV1SubmitTransactionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCommitmentsV1SubmitTransactionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
